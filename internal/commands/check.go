// internal/commands/check.go
package commands

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"bytes"

	"github.com/Avdushin/secret/pkg/config"
	"github.com/ProtonMail/go-crypto/openpgp"
	"github.com/ProtonMail/go-crypto/openpgp/armor"
	"github.com/ProtonMail/go-crypto/openpgp/packet"
	"github.com/spf13/cobra"
)

// @ check cmd
func CheckCmd() *cobra.Command {
	var showAll bool

	cmd := &cobra.Command{
		Use:   "check",
		Short: "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPG –∫–ª—é—á–µ–π",
		Long: `–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPG –∫–ª—é—á–µ–π.
–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª—é—á —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
–° —Ñ–ª–∞–≥–æ–º --all –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏.`,
		Run: func(cmd *cobra.Command, args []string) {
			if showAll {
				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏
				checkAllKeys()
			} else {
				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞
				checkProjectKey()
			}
		},
	}

	cmd.Flags().BoolVarP(&showAll, "all", "a", false, "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ GPG –∫–ª—é—á–∏")
	return cmd
}

// ? –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ GPG –∫–ª—é—á–∏
func checkAllKeys() {
	fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ GPG –∫–ª—é—á–∏...")
	// Since no system gpg, perhaps list from .secret
	priv, err := os.ReadFile(".secret/private.asc")
	if err != nil {
		fmt.Printf("‚ùå –ù–µ—Ç –∫–ª—é—á–µ–π –≤ .secret: %v\n", err)
		return
	}
	fmt.Println(string(priv))
}

// ? –ö–ª—é—á —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
func checkProjectKey() {
	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–æ–µ–∫—Ç–∞
	cfg, err := config.LoadConfig()
	var projectKey string
	if err == nil && cfg.GPGKey != "" {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
		projectKey = cfg.GPGKey
		fmt.Printf("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: %s\n", projectKey)
	} else {
		// –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
		projectKey, err = detectProjectKeyFromDir()
		if err != nil {
			fmt.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞: %v\n", err)
			fmt.Println("–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
			fmt.Println("1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ secret init –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
			fmt.Println("2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–ª—é—á–∏: secret import")
			fmt.Println("3. –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –≤—Ä—É—á–Ω—É—é: secret check --all")
			os.Exit(1)
		}
		fmt.Printf("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞: %s\n", projectKey)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á
	// Load private
	privArm, err := os.ReadFile(".secret/private.asc")
	if err != nil {
		fmt.Printf("‚ùå –ö–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: %v\n", err)
		os.Exit(1)
	}

	block, err := armor.Decode(bytes.NewReader(privArm))
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: %v\n", err)
		os.Exit(1)
	}

	entity, err := openpgp.ReadEntity(packet.NewReader(block.Body))
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–ª—é—á–∞: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("‚úÖ –ö–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω:\n")
	fmt.Printf("KeyID: %s\n", entity.PrimaryKey.KeyIdString())
	fmt.Printf("Fingerprint: %s\n", entity.PrimaryKey.Fingerprint)
	for id, identity := range entity.Identities {
		fmt.Printf("Identity: %s\n", id, identity.Name)
	}
	fmt.Printf("Creation: %v\n", entity.PrimaryKey.CreationTime)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
	fmt.Printf("\nüîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è... ")

	// Test encrypt small data
	pubArm, err := os.ReadFile(".secret/public.asc")
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞")
		return
	}
	pubBlock, err := armor.Decode(bytes.NewReader(pubArm))
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞")
		return
	}
	pubEntity, err := openpgp.ReadEntity(packet.NewReader(pubBlock.Body))
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞")
		return
	}

	buf := bytes.NewBuffer(nil)
	w, err := openpgp.Encrypt(buf, []*openpgp.Entity{pubEntity}, nil, nil, nil)
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
		return
	}
	w.Write([]byte("test"))
	w.Close()

	fmt.Println("‚úÖ OK")
}

func detectProjectKeyFromDir() (string, error) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	currentDir, err := os.Getwd()
	if err != nil {
		return "", err
	}
	dirName := filepath.Base(currentDir)

	// Load private
	privArm, err := os.ReadFile(".secret/private.asc")
	if err != nil {
		return "", err
	}

	block, err := armor.Decode(bytes.NewReader(privArm))
	if err != nil {
		return "", err
	}

	entity, err := openpgp.ReadEntity(packet.NewReader(block.Body))
	if err != nil {
		return "", err
	}

	for _, identity := range entity.Identities {
		if strings.Contains(identity.Name, dirName) {
			return entity.PrimaryKey.KeyIdString(), nil
		}
	}
	return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª—é—á –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ %s", dirName)
}
