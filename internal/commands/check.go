// internal/commands/check.go
package commands

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/Avdushin/secret/pkg/config"
	"github.com/spf13/cobra"
)

// @ check cmd
func CheckCmd() *cobra.Command {
	var showAll bool

	cmd := &cobra.Command{
		Use:   "check",
		Short: "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPG –∫–ª—é—á–µ–π",
		Long: `–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPG –∫–ª—é—á–µ–π.
–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª—é—á —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
–° —Ñ–ª–∞–≥–æ–º --all –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏.`,
		Run: func(cmd *cobra.Command, args []string) {
			if showAll {
				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏
				checkAllKeys()
			} else {
				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞
				checkProjectKey()
			}
		},
	}

	cmd.Flags().BoolVarP(&showAll, "all", "a", false, "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ GPG –∫–ª—é—á–∏")
	return cmd
}

// ? –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ GPG –∫–ª—é—á–∏
func checkAllKeys() {
	fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ GPG –∫–ª—é—á–∏...")
	out, err := exec.Command("gpg", "--list-secret-keys", "--keyid-format=LONG").CombinedOutput()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π: %v\n", err)
		return
	}
	fmt.Println(string(out))
}

// ? –ö–ª—é—á —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
func checkProjectKey() {
	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–æ–µ–∫—Ç–∞
	cfg, err := config.LoadConfig()
	var projectKey string
	if err == nil && cfg.GPGKey != "" {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
		projectKey = cfg.GPGKey
		fmt.Printf("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: %s\n", projectKey)
	} else {
		// –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
		projectKey, err = detectProjectKeyFromDir()
		if err != nil {
			fmt.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞: %v\n", err)
			fmt.Println("–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
			fmt.Println("1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ secret init –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
			fmt.Println("2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–ª—é—á–∏: secret import")
			fmt.Println("3. –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –≤—Ä—É—á–Ω—É—é: secret check --all")
			os.Exit(1)
		}
		fmt.Printf("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞: %s\n", projectKey)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á
	checkCmd := exec.Command("gpg", "--list-keys", projectKey)
	if output, err := checkCmd.CombinedOutput(); err != nil {
		fmt.Printf("‚ùå –ö–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ GPG: %s\n", projectKey)
		fmt.Printf("–í—ã–≤–æ–¥: %s\n", string(output))
		fmt.Printf("–í–æ–∑–º–æ–∂–Ω–æ –∫–ª—é—á –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω\n")
		fmt.Println("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á: secret import")
		os.Exit(1)
	} else {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ –ø—Ä–æ–µ–∫—Ç–∞
		fmt.Printf("‚úÖ –ö–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω:\n")
		// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ
		detailCmd := exec.Command("gpg", "--list-secret-keys", "--keyid-format=LONG", projectKey)
		if detailOutput, err := detailCmd.CombinedOutput(); err == nil {
			lines := strings.Split(string(detailOutput), "\n")
			for _, line := range lines {
				if strings.Contains(line, projectKey) || strings.Contains(line, "sec") || strings.Contains(line, "uid") {
					fmt.Println(line)
				}
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
		fmt.Printf("\nüîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è... ")
		testEncryptCmd := exec.Command("gpg", "--encrypt", "--recipient", projectKey, "--armor", "--output", "/dev/null", "/dev/null")
		if err := testEncryptCmd.Run(); err != nil {
			fmt.Println("‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
			fmt.Printf("–í–æ–∑–º–æ–∂–Ω–æ –∫–ª—é—á –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤\n")
		} else {
			fmt.Println("‚úÖ OK")
		}
	}
}

// ? –ü—ã—Ç–∞–µ—Ç–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
func detectProjectKeyFromDir() (string, error) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	currentDir, err := os.Getwd()
	if err != nil {
		return "", err
	}
	dirName := filepath.Base(currentDir)

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
	out, err := exec.Command("gpg", "--list-secret-keys", "--keyid-format=LONG").CombinedOutput()
	if err != nil {
		return "", err
	}

	lines := strings.Split(string(out), "\n")
	for idx, line := range lines {
		if strings.Contains(line, "uid") && strings.Contains(line, dirName) {
			// –ò—â–µ–º "sec" –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö (–Ω–∞–∑–∞–¥ –¥–æ 5 —Å—Ç—Ä–æ–∫)
			for j := 1; j <= 5; j++ {
				if idx-j < 0 {
					break
				}
				prevLine := lines[idx-j]
				if strings.Contains(prevLine, "sec") {
					parts := strings.Fields(prevLine)
					if len(parts) >= 2 {
						keyPart := parts[1]
						if strings.Contains(keyPart, "/") {
							keyParts := strings.Split(keyPart, "/")
							if len(keyParts) == 2 {
								return keyParts[1], nil
							}
						}
					}
				}
			}
		}
	}
	return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª—é—á –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ %s", dirName)
}
