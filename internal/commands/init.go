package commands

import (
	"bufio"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/Avdushin/secret/pkg/config"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

// @ init cmd
func InitCmd() *cobra.Command {
	var backend string

	cmd := &cobra.Command{
		Use:   "init",
		Short: "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏",
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Printf("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –±—ç–∫–µ–Ω–¥–æ–º: %s\n", backend)

			//@ –∏–º—è —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏ –∫–∞–∫ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
			projectDir, err := os.Getwd()
			if err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏: %v\n", err)
				os.Exit(1)
			}
			defaultProjectName := filepath.Base(projectDir)

			//? pr name
			projectName := promptUser(
				fmt.Sprintf("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ [%s]: ", defaultProjectName),
				defaultProjectName,
			)

			//@ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
			fmt.Println("\n–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
			fmt.Printf("–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s\n", strings.Join(config.DefaultSecretFiles, ", "))
			filesInput := promptUser("–§–∞–π–ª—ã/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ", "")

			var secretFiles []string
			if filesInput == "" {
				secretFiles = config.DefaultSecretFiles
			} else {
				secretFiles = strings.Split(filesInput, ",")
				for i := range secretFiles {
					secretFiles[i] = strings.TrimSpace(secretFiles[i])
				}
			}

			//@ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã GPG –∫–ª—é—á–∞
			fmt.Println("\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPG –∫–ª—é—á–∞")

			// –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–ª—é—á–∞
			keyType := promptUserWithOptions(
				"–¢–∏–ø –∫–ª—é—á–∞ (RSA/DSA/ECC) [RSA]: ",
				[]string{"RSA", "DSA", "ECC"},
				"RSA",
			)

			// –î–ª–∏–Ω–∞ –∫–ª—é—á–∞
			var keyLength int
			switch keyType {
			case "RSA":
				keyLength = promptInt("–î–ª–∏–Ω–∞ RSA –∫–ª—é—á–∞ (2048/3072/4096) [4096]: ", 4096, []int{2048, 3072, 4096})
			case "DSA":
				keyLength = promptInt("–î–ª–∏–Ω–∞ DSA –∫–ª—é—á–∞ (1024/2048/3072) [2048]: ", 2048, []int{1024, 2048, 3072})
			case "ECC":
				keyLength = 0 // ECC –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—Ä–∏–≤—ã–µ, –∞ –Ω–µ –¥–ª–∏–Ω—É
			}

			// –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
			expireDate := promptUser("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ (0=–±–µ—Å—Å—Ä–æ—á–Ω–æ, 1y, 12m, 52w, 355) [2y]: ", "2y")

			// –ü–∞—Ä–æ–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞
			usePassphrase := promptYesNo("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –∫–ª—é—á–∞? (y/N): ", false)
			var passphrase string
			if usePassphrase {
				passphrase = promptPassword("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É: ")
				confirm := promptPassword("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É: ")
				if passphrase != confirm {
					fmt.Println("‚ùå –ü–∞—Ä–æ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
					os.Exit(1)
				}
			}

			//@ –°–æ–∑–¥–∞–µ–º GPG –∫–ª—é—á
			timestamp := time.Now().Format("2006-01-02")
			keyName := fmt.Sprintf("%s Project Key (%s)", projectName, timestamp)
			keyEmail := fmt.Sprintf("project+%s@team.org", strings.ToLower(projectName))

			fmt.Printf("\n–°–æ–∑–¥–∞–µ–º GPG-–∫–ª—é—á –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: %s\n", keyName)
			keyID, err := generateGPGKey(keyName, keyEmail, "Auto-generated by secret tool", keyType, keyLength, expireDate, passphrase)
			if err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞: %v\n", err)
				os.Exit(1)
			}

			//@ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
			cfg := &config.Config{
				Backend:     backend,
				GPGKey:      keyID,
				ProjectName: projectName,
				SecretFiles: secretFiles,
			}

			if err := config.SaveConfig(cfg); err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: %v\n", err)
				os.Exit(1)
			}

			fmt.Printf("\n‚úÖ –£—Å–ø–µ—à–Ω–æ! –ö–ª—é—á —Å–æ–∑–¥–∞–Ω (ID: %s)\n", keyID)
			fmt.Printf("üîë –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–ª—é—á–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: secret export-key\n")
			fmt.Printf("üîí –î–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: secret encrypt\n")
		},
	}

	cmd.Flags().StringVarP(&backend, "backend", "b", "gpg", "–ë—ç–∫–µ–Ω–¥ (gpg, vault, bitwarden)")
	return cmd
}

func promptUser(prompt, defaultValue string) string {
	reader := bufio.NewReader(os.Stdin)
	fmt.Print(prompt)
	input, _ := reader.ReadString('\n')
	input = strings.TrimSpace(input)

	if input == "" {
		return defaultValue
	}
	return input
}

func promptUserWithOptions(prompt string, options []string, defaultValue string) string {
	reader := bufio.NewReader(os.Stdin)

	for {
		fmt.Print(prompt)
		input, _ := reader.ReadString('\n')
		input = strings.TrimSpace(input)

		if input == "" {
			return defaultValue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–≤–æ–¥ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –æ–ø—Ü–∏—è—Ö
		for _, option := range options {
			if strings.EqualFold(input, option) {
				return option
			}
		}

		fmt.Printf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: %s\n", strings.Join(options, ", "))
	}
}

func promptInt(prompt string, defaultValue int, validValues []int) int {
	reader := bufio.NewReader(os.Stdin)

	for {
		fmt.Print(prompt)
		input, _ := reader.ReadString('\n')
		input = strings.TrimSpace(input)

		if input == "" {
			return defaultValue
		}

		value, err := strconv.Atoi(input)
		if err != nil {
			fmt.Println("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
			continue
		}

		// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º
		if len(validValues) > 0 {
			valid := false
			for _, v := range validValues {
				if value == v {
					valid = true
					break
				}
			}
			if !valid {
				fmt.Printf("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: %v\n", validValues)
				continue
			}
		}

		return value
	}
}

func promptYesNo(prompt string, defaultValue bool) bool {
	reader := bufio.NewReader(os.Stdin)

	for {
		fmt.Print(prompt)
		input, _ := reader.ReadString('\n')
		input = strings.TrimSpace(strings.ToLower(input))

		if input == "" {
			return defaultValue
		}

		if input == "y" || input == "yes" || input == "–¥" || input == "–¥–∞" {
			return true
		}
		if input == "n" || input == "no" || input == "–Ω" || input == "–Ω–µ—Ç" {
			return false
		}

		fmt.Println("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ 'y' –∏–ª–∏ 'n'")
	}
}

func promptPassword(prompt string) string {
	fmt.Print(prompt)

	// –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞—Ä–æ–ª—å –±–µ–∑ —ç—Ö–∞
	if term.IsTerminal(int(os.Stdin.Fd())) {
		bytePassword, err := term.ReadPassword(int(os.Stdin.Fd()))
		if err == nil {
			fmt.Println()
			return string(bytePassword)
		}
	}

	// Fallback: –æ–±—ã—á–Ω—ã–π –≤–≤–æ–¥
	reader := bufio.NewReader(os.Stdin)
	input, _ := reader.ReadString('\n')
	return strings.TrimSpace(input)
}

func generateGPGKey(name, email, comment, keyType string, keyLength int, expireDate, passphrase string) (string, error) {
	// –°–æ–∑–¥–∞–µ–º batch —Ñ–∞–π–ª —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	batchContent := fmt.Sprintf(`Key-Type: %s
`, keyType)

	if keyLength > 0 {
		batchContent += fmt.Sprintf("Key-Length: %d\n", keyLength)
	}

	if keyType == "RSA" {
		batchContent += `Subkey-Type: RSA
Subkey-Length: ` + fmt.Sprintf("%d", keyLength) + `
`
	}

	batchContent += fmt.Sprintf(`Name-Real: %s
Name-Email: %s
Name-Comment: %s
Expire-Date: %s
`, name, email, comment, expireDate)

	if passphrase != "" {
		batchContent += fmt.Sprintf("Passphrase: %s\n", passphrase)
	} else {
		batchContent += "%no-protection\n"
	}

	batchContent += "%commit\n"

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	tmpFile, err := os.CreateTemp("", "gpg-batch-*.txt")
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: %v", err)
	}
	defer os.Remove(tmpFile.Name())

	if _, err := tmpFile.WriteString(batchContent); err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: %v", err)
	}
	tmpFile.Close()

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
	cmd := exec.Command("gpg", "--batch", "--gen-key", tmpFile.Name())
	output, err := cmd.CombinedOutput()
	if err != nil {
		return "", fmt.Errorf("%s: %v", string(output), err)
	}

	// –ò—â–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
	cmd = exec.Command("gpg", "--list-secret-keys", "--keyid-format", "LONG", email)
	output, err = cmd.CombinedOutput()
	if err != nil {
		return "", err
	}

	// –ü–∞—Ä—Å–∏–º ID –∫–ª—é—á–∞
	lines := strings.Split(string(output), "\n")
	for _, line := range lines {
		if strings.Contains(line, "sec") {
			parts := strings.Fields(line)
			if len(parts) > 2 {
				keyParts := strings.Split(parts[1], "/")
				if len(keyParts) > 1 {
					return keyParts[1], nil
				}
			}
		}
	}

	return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞")
}
