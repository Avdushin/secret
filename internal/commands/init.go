package commands

import (
	"bufio"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"

	"github.com/Avdushin/secret/pkg/config"
	"github.com/spf13/cobra"
)

// @ init cmd
func InitCmd() *cobra.Command {
	var backend string

	cmd := &cobra.Command{
		Use:   "init",
		Short: "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏",
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Printf("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –±—ç–∫–µ–Ω–¥–æ–º: %s\n", backend)

			//@ –∏–º—è —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏ –∫–∞–∫ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
			projectDir, err := os.Getwd()
			if err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏: %v\n", err)
				os.Exit(1)
			}
			defaultProjectName := filepath.Base(projectDir)

			//? pr name
			projectName := promptUser(
				fmt.Sprintf("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ [%s]: ", defaultProjectName),
				defaultProjectName,
			)

			//@ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
			fmt.Println("\n–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
			fmt.Printf("–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s\n", strings.Join(config.DefaultSecretFiles, ", "))
			filesInput := promptUser("–§–∞–π–ª—ã/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ", "")

			var secretFiles []string
			if filesInput == "" {
				secretFiles = config.DefaultSecretFiles
			} else {
				secretFiles = strings.Split(filesInput, ",")
				for i := range secretFiles {
					secretFiles[i] = strings.TrimSpace(secretFiles[i])
				}
			}

			//@ –°–æ–∑–¥–∞–µ–º GPG –∫–ª—é—á
			timestamp := time.Now().Format("2006-01-02")
			keyName := fmt.Sprintf("%s Project Key (%s)", projectName, timestamp)
			keyEmail := fmt.Sprintf("project+%s@team.org", strings.ToLower(projectName))

			fmt.Printf("\n–°–æ–∑–¥–∞–µ–º GPG-–∫–ª—é—á –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: %s\n", keyName)
			keyID, err := generateGPGKey(keyName, keyEmail, "Auto-generated by secret tool")
			if err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞: %v\n", err)
				os.Exit(1)
			}

			//@ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
			cfg := &config.Config{
				Backend:     backend,
				GPGKey:      keyID,
				ProjectName: projectName,
				SecretFiles: secretFiles,
			}

			if err := config.SaveConfig(cfg); err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: %v\n", err)
				os.Exit(1)
			}

			fmt.Printf("\n‚úÖ –£—Å–ø–µ—à–Ω–æ! –ö–ª—é—á —Å–æ–∑–¥–∞–Ω (ID: %s)\n", keyID)
			fmt.Printf("üîë –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–ª—é—á–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: secret export-key\n")
			fmt.Printf("üîí –î–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: secret encrypt\n")
		},
	}

	cmd.Flags().StringVarP(&backend, "backend", "b", "gpg", "–ë—ç–∫–µ–Ω–¥ (gpg, vault, bitwarden)")
	return cmd
}

func promptUser(prompt, defaultValue string) string {
	reader := bufio.NewReader(os.Stdin)
	fmt.Print(prompt)
	input, _ := reader.ReadString('\n')
	input = strings.TrimSpace(input)

	if input == "" {
		return defaultValue
	}
	return input
}

func generateGPGKey(name, email, comment string) (string, error) {
	input := fmt.Sprintf("Key-Type: RSA\nKey-Length: 4096\nName-Real: %s\nName-Email: %s\nName-Comment: %s\nExpire-Date: 2y\n%%commit\n",
		name, email, comment)

	cmd := exec.Command("gpg", "--batch", "--gen-key")
	cmd.Stdin = strings.NewReader(input)
	output, err := cmd.CombinedOutput()
	if err != nil {
		return "", fmt.Errorf("%s: %v", string(output), err)
	}

	//? ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
	cmd = exec.Command("gpg", "--list-secret-keys", "--keyid-format", "LONG", email)
	output, err = cmd.CombinedOutput()
	if err != nil {
		return "", err
	}

	//? –ø–∞—Ä—Å–∏–º ID –∫–ª—é—á–∞
	lines := strings.Split(string(output), "\n")
	for _, line := range lines {
		if strings.Contains(line, "sec") {
			parts := strings.Fields(line)
			if len(parts) > 2 {
				keyParts := strings.Split(parts[1], "/")
				if len(keyParts) > 1 {
					return keyParts[1], nil
				}
			}
		}
	}

	return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞")
}
