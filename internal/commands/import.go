package commands

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/Avdushin/secret/pkg/config"
	"github.com/spf13/cobra"
)

// @ ImportKeyCmd –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç GPG-–∫–ª—é—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
func ImportKeyCmd() *cobra.Command {
	var keyDir string
	var force bool
	var passphrase string
	var noPassphrase bool

	cmd := &cobra.Command{
		Use:   "import [directory]",
		Short: "–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç GPG-–∫–ª—é—á–∏ –ø—Ä–æ–µ–∫—Ç–∞",
		Long: `–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç GPG-–∫–ª—é—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
–∏—â–µ—Ç –∫–ª—é—á–∏ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö.
–ü—Ä–∏–º–µ—Ä—ã:
  secret import # –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  secret import .secrets/backup # –ü–æ–∏—Å–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  secret import --dir .secrets/backup # –¢–æ –∂–µ —Å–∞–º–æ–µ —Å —Ñ–ª–∞–≥–æ–º`,
		Args: cobra.MaximumNArgs(1), // –†–∞–∑—Ä–µ—à–∞–µ–º 0 –∏–ª–∏ 1 –∞—Ä–≥—É–º–µ–Ω—Ç
		Run: func(cmd *cobra.Command, args []string) {
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
			if len(args) > 0 && keyDir == "" {
				keyDir = args[0]
			}

			// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞
			cfg, err := config.LoadConfig()
			if err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: %v\n", err)
				os.Exit(1)
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–ª—é—á–µ–π
			filenamePrefix := "key"
			if cfg.ProjectName != "" {
				filenamePrefix = strings.ToLower(strings.ReplaceAll(cfg.ProjectName, " ", "_"))
			}

			// –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –∫–ª—é—á–µ–π
			pubKeyPath, privKeyPath, err := findKeyFiles(keyDir, filenamePrefix)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–π: %v\n", err)
				fmt.Println("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∫–ª—é—á–∞–º–∏: secret import <–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è>")
				os.Exit(1)
			}

			fmt.Printf("üîç –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–∏:\n")
			fmt.Printf(" - –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: %s\n", pubKeyPath)
			fmt.Printf(" - –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: %s\n", privKeyPath)

			// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞
			if passphrase == "" && !noPassphrase {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –∫–ª—é—á –ø–∞—Ä–æ–ª—å
				if keyRequiresPassphrase(privKeyPath) {
					passphrase = promptPassword("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –∫–ª—é—á–∞: ")
				}
			}

			// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
			fmt.Println("\nüì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á...")
			if err := importKey(pubKeyPath, false, ""); err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: %v\n", err)
				os.Exit(1)
			}

			// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
			fmt.Println("üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á...")
			if err := importKey(privKeyPath, true, passphrase); err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: %v\n", err)
				os.Exit(1)
			}

			// –ü–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º keyID –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥
			keyID, err := detectProjectKey(cfg.ProjectName)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è keyID –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞: %v\n", err)
				os.Exit(1)
			}

			cfg.GPGKey = keyID
			if err := config.SaveConfig(cfg); err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: %v\n", err)
				os.Exit(1)
			}

			fmt.Println("\n‚úÖ –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
			fmt.Printf("‚úÖ –ö–ª—é—á %s —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ –ø—Ä–æ–µ–∫—Ç–∞.\n", keyID)
			fmt.Println("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
		},
	}

	cmd.Flags().StringVarP(&keyDir, "dir", "d", "", "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)")
	cmd.Flags().BoolVarP(&force, "force", "f", false, "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –∫–ª—é—á–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
	cmd.Flags().StringVarP(&passphrase, "passphrase", "p", "", "–ü–∞—Ä–æ–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –∫–ª—é—á–∞")
	cmd.Flags().BoolVar(&noPassphrase, "no-passphrase", false, "–ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É (–µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –∑–∞—â–∏—â–µ–Ω)")
	return cmd
}

// findKeyFiles –∏—â–µ—Ç —Ñ–∞–π–ª—ã –∫–ª—é—á–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
func findKeyFiles(searchDir, prefix string) (string, string, error) {
	if searchDir == "" {
		searchDir = "."
	}

	var pubKeyPath, privKeyPath string
	foundPub, foundPriv := false, false

	err := filepath.Walk(searchDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.IsDir() {
			return nil
		}

		filename := strings.ToLower(info.Name())

		// –ò—â–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
		if !foundPub && strings.Contains(filename, prefix) &&
			(strings.HasSuffix(filename, ".pub.asc") ||
				strings.HasSuffix(filename, "_pub.asc") ||
				strings.Contains(filename, "public")) {
			pubKeyPath = path
			foundPub = true
		}

		// –ò—â–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
		if !foundPriv && strings.Contains(filename, prefix) &&
			(strings.HasSuffix(filename, ".priv.asc") ||
				strings.HasSuffix(filename, "_priv.asc") ||
				strings.HasSuffix(filename, ".private.asc") ||
				strings.Contains(filename, "private")) {
			privKeyPath = path
			foundPriv = true
		}

		// –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ–±–∞ –∫–ª—é—á–∞, –º–æ–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –ø–æ–∏—Å–∫
		if foundPub && foundPriv {
			return filepath.SkipAll
		}

		return nil
	})

	if err != nil {
		return "", "", err
	}

	if !foundPub || !foundPriv {
		return "", "", fmt.Errorf("–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±–∞ —Ñ–∞–π–ª–∞ –∫–ª—é—á–µ–π. –ò—Å–∫–∞–ª–∏ —Ñ–∞–π–ª—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: '%s' –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: '%s'", prefix, searchDir)
	}

	return pubKeyPath, privKeyPath, nil
}

// importKey –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–ª—é—á —Å –ø–æ–º–æ—â—å—é GPG
func importKey(keyPath string, isPrivate bool, passphrase string) error {
	var cmd *exec.Cmd

	if isPrivate && passphrase != "" {
		// –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ —Å –ø–∞—Ä–æ–ª–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º batch —Ä–µ–∂–∏–º
		cmd = exec.Command("gpg", "--batch", "--yes", "--passphrase", passphrase, "--import", keyPath)
	} else if isPrivate {
		// –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –±–µ–∑ –ø–∞—Ä–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
		cmd = exec.Command("gpg", "--import", keyPath)
	} else {
		// –î–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º batch —Ä–µ–∂–∏–º
		cmd = exec.Command("gpg", "--batch", "--yes", "--import", keyPath)
	}

	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	if err := cmd.Run(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è gpg --import: %v", err)
	}

	return nil
}

// detectProjectKey –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç keyID –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞
func detectProjectKey(projectName string) (string, error) {
	out, err := exec.Command("gpg", "--list-secret-keys", "--keyid-format=LONG").CombinedOutput()
	if err != nil {
		return "", err
	}

	lines := strings.Split(string(out), "\n")
	for idx, line := range lines {
		if strings.Contains(line, "uid") && strings.Contains(line, projectName) {
			// –ò—â–µ–º "sec" –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö (–Ω–∞–∑–∞–¥ –¥–æ 5 —Å—Ç—Ä–æ–∫)
			for j := 1; j <= 5; j++ {
				if idx-j < 0 {
					break
				}
				prevLine := lines[idx-j]
				if strings.Contains(prevLine, "sec") {
					parts := strings.Fields(prevLine)
					if len(parts) >= 2 {
						keyPart := parts[1]
						if strings.Contains(keyPart, "/") {
							keyParts := strings.Split(keyPart, "/")
							if len(keyParts) == 2 {
								return keyParts[1], nil
							}
						}
					}
				}
			}
		}
	}
	return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª—é—á –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ %s –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞", projectName)
}

// keyRequiresPassphrase –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –∫–ª—é—á –ø–∞—Ä–æ–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É
func keyRequiresPassphrase(keyPath string) bool {
	// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—â–∏—Ç–µ
	content, err := os.ReadFile(keyPath)
	if err != nil {
		return true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω—É–∂–µ–Ω
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
	contentStr := string(content)
	return strings.Contains(contentStr, "PROTECTED") ||
		strings.Contains(contentStr, "ENCAPSULATED") ||
		!strings.Contains(contentStr, "UNPROTECTED")
}

// promptPassword –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// func promptPassword(prompt string) string {
// 	fmt.Print(prompt)

// 	// –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞—Ä–æ–ª—å –±–µ–∑ —ç—Ö–∞
// 	if term.IsTerminal(int(os.Stdin.Fd())) {
// 		bytePassword, err := term.ReadPassword(int(os.Stdin.Fd()))
// 		if err == nil {
// 			fmt.Println()
// 			return string(bytePassword)
// 		}
// 	}

// 	// Fallback: –æ–±—ã—á–Ω—ã–π –≤–≤–æ–¥
// 	reader := bufio.NewReader(os.Stdin)
// 	input, _ := reader.ReadString('\n')
// 	return strings.TrimSpace(input)
// }
