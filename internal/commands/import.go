// internal/commands/import.go
package commands

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"bytes"

	"github.com/Avdushin/secret/pkg/config"
	"github.com/ProtonMail/go-crypto/openpgp"
	"github.com/ProtonMail/go-crypto/openpgp/armor"
	"github.com/ProtonMail/go-crypto/openpgp/packet"
	"github.com/spf13/cobra"
)

// @ ImportKeyCmd –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç GPG-–∫–ª—é—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
func ImportKeyCmd() *cobra.Command {
	var keyDir string
	var force bool

	cmd := &cobra.Command{
		Use:   "import [directory]",
		Short: "–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç GPG-–∫–ª—é—á–∏ –ø—Ä–æ–µ–∫—Ç–∞",
		Long: `–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç GPG-–∫–ª—é—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
–∏—â–µ—Ç –∫–ª—é—á–∏ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö.
–ü—Ä–∏–º–µ—Ä—ã:
  secret import # –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  secret import .secrets/backup # –ü–æ–∏—Å–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  secret import --dir .secrets/backup # –¢–æ –∂–µ —Å–∞–º–æ–µ —Å —Ñ–ª–∞–≥–æ–º`,
		Args: cobra.MaximumNArgs(1), // –†–∞–∑—Ä–µ—à–∞–µ–º 0 –∏–ª–∏ 1 –∞—Ä–≥—É–º–µ–Ω—Ç
		Run: func(cmd *cobra.Command, args []string) {
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
			if len(args) > 0 && keyDir == "" {
				keyDir = args[0]
			}

			// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞
			cfg, err := config.LoadConfig()
			if err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: %v\n", err)
				os.Exit(1)
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–ª—é—á–µ–π
			filenamePrefix := "key"
			if cfg.ProjectName != "" {
				filenamePrefix = strings.ToLower(strings.ReplaceAll(cfg.ProjectName, " ", "_"))
			}

			// –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –∫–ª—é—á–µ–π
			pubKeyPath, privKeyPath, err := findKeyFiles(keyDir, filenamePrefix)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–π: %v\n", err)
				fmt.Println("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∫–ª—é—á–∞–º–∏: secret import <–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è>")
				os.Exit(1)
			}

			fmt.Printf("üîç –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–∏:\n")
			fmt.Printf(" - –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: %s\n", pubKeyPath)
			fmt.Printf(" - –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: %s\n", privKeyPath)

			// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
			// Load pub
			pubData, err := os.ReadFile(pubKeyPath)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: %v\n", err)
				os.Exit(1)
			}
			pubBlock, err := armor.Decode(bytes.NewReader(pubData))
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: %v\n", err)
				os.Exit(1)
			}
			_, err = openpgp.ReadEntity(packet.NewReader(pubBlock.Body))
			if err != nil {
				fmt.Printf("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: %v\n", err)
				os.Exit(1)
			}

			// Load priv
			privData, err := os.ReadFile(privKeyPath)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: %v\n", err)
				os.Exit(1)
			}
			privBlock, err := armor.Decode(bytes.NewReader(privData))
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: %v\n", err)
				os.Exit(1)
			}
			privEntity, err := openpgp.ReadEntity(packet.NewReader(privBlock.Body))
			if err != nil {
				fmt.Printf("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: %v\n", err)
				os.Exit(1)
			}

			// –ö–æ–ø–∏—Ä—É–µ–º
			err = os.MkdirAll(".secret", 0700)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .secret: %v\n", err)
				os.Exit(1)
			}
			err = os.WriteFile(".secret/public.asc", pubData, 0600)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: %v\n", err)
				os.Exit(1)
			}
			err = os.WriteFile(".secret/private.asc", privData, 0600)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: %v\n", err)
				os.Exit(1)
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º keyID –≤ –∫–æ–Ω—Ñ–∏–≥
			keyID := privEntity.PrimaryKey.KeyIdString()

			cfg.GPGKey = keyID
			if err := config.SaveConfig(cfg); err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: %v\n", err)
				os.Exit(1)
			}

			fmt.Println("\n‚úÖ –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
			fmt.Printf("‚úÖ –ö–ª—é—á %s —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ –ø—Ä–æ–µ–∫—Ç–∞.\n", keyID)
			fmt.Println("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
		},
	}

	cmd.Flags().StringVarP(&keyDir, "dir", "d", "", "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)")
	cmd.Flags().BoolVarP(&force, "force", "f", false, "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –∫–ª—é—á–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
	return cmd
}

// findKeyFiles –∏—â–µ—Ç —Ñ–∞–π–ª—ã –∫–ª—é—á–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
func findKeyFiles(searchDir, prefix string) (string, string, error) {
	if searchDir == "" {
		searchDir = "."
	}

	var pubKeyPath, privKeyPath string
	foundPub, foundPriv := false, false

	err := filepath.Walk(searchDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.IsDir() {
			return nil
		}

		filename := strings.ToLower(info.Name())

		// –ò—â–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
		if !foundPub && strings.Contains(filename, prefix) &&
			(strings.HasSuffix(filename, ".pub.asc") ||
				strings.HasSuffix(filename, "_pub.asc") ||
				strings.Contains(filename, "public")) {
			pubKeyPath = path
			foundPub = true
		}

		// –ò—â–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
		if !foundPriv && strings.Contains(filename, prefix) &&
			(strings.HasSuffix(filename, ".priv.asc") ||
				strings.HasSuffix(filename, "_priv.asc") ||
				strings.HasSuffix(filename, ".private.asc") ||
				strings.Contains(filename, "private")) {
			privKeyPath = path
			foundPriv = true
		}

		// –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ–±–∞ –∫–ª—é—á–∞, –º–æ–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –ø–æ–∏—Å–∫
		if foundPub && foundPriv {
			return filepath.SkipAll
		}

		return nil
	})

	if err != nil {
		return "", "", err
	}

	if !foundPub || !foundPriv {
		return "", "", fmt.Errorf("–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±–∞ —Ñ–∞–π–ª–∞ –∫–ª—é—á–µ–π. –ò—Å–∫–∞–ª–∏ —Ñ–∞–π–ª—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: '%s' –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: '%s'", prefix, searchDir)
	}

	return pubKeyPath, privKeyPath, nil
}
