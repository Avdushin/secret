package commands

import (
	"bufio"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/Avdushin/secret/pkg/config"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

// @ delete cmd
func DeleteKeyCmd() *cobra.Command {
	var force bool
	var noBackup bool

	cmd := &cobra.Command{
		Use:   "delete-key",
		Short: "–£–¥–∞–ª—è–µ—Ç GPG-–∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞",
		Run: func(cmd *cobra.Command, args []string) {
			cfg, err := config.LoadConfig()

			// –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–ª–∏ –∫–ª—é—á –≤ –∫–æ–Ω—Ñ–∏–≥–µ –ø—É—Å—Ç–æ–π,
			// –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–ª—é—á –≤ GPG
			var keyID string
			if err != nil || cfg.GPGKey == "" {
				fmt.Println("‚ÑπÔ∏è  –í –∫–æ–Ω—Ñ–∏–≥–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω GPG-–∫–ª—é—á")
				fmt.Println("üîç –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–ª—é—á –≤ GPG...")

				// –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞
				autoKey, autoErr := autoDetectKey()
				if autoErr != nil {
					fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ GPG-–∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞")
					fmt.Println("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: secret init")
					os.Exit(1)
				}

				keyID = autoKey
				fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª—é—á –≤ GPG: %s\n", keyID)
			} else {
				keyID = cfg.GPGKey
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á –≤ GPG
			if !keyExistsInGPG(keyID) {
				fmt.Printf("‚ùå –ö–ª—é—á %s –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ GPG\n", keyID)
				if cfg.GPGKey != "" {
					fmt.Println("–û—á–∏—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
					cfg.GPGKey = ""
					config.SaveConfig(cfg) // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
				}
				fmt.Println("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: secret init")
				os.Exit(1)
			}

			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ
			keyInfo, err := getKeyInfo(keyID)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ: %v\n", err)
				os.Exit(1)
			}

			if !force {
				fmt.Printf("\n–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞:\n")
				fmt.Printf("ID: %s\n", keyID)
				fmt.Printf("–ò–º—è: %s\n", keyInfo.name)
				fmt.Printf("Email: %s\n", keyInfo.email)
				fmt.Print("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")

				reader := bufio.NewReader(os.Stdin)
				confirm, _ := reader.ReadString('\n')
				if strings.ToLower(strings.TrimSpace(confirm)) != "y" {
					fmt.Println("–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è")
					return
				}
			}

			// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é (–µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
			if !noBackup {
				fmt.Println("\n–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∫–ª—é—á–µ–π...")
				if err := createBackup(keyID); err != nil {
					fmt.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: %v\n", err)
					fmt.Println("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
				}
			}

			// –£–¥–∞–ª—è–µ–º –∫–ª—é—á –∏–∑ GPG
			fmt.Println("\n–£–¥–∞–ª—è–µ–º –∫–ª—é—á –∏–∑ GPG...")
			if err := deleteKey(keyID); err != nil {
				fmt.Printf("\n‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞: %v\n", err)
				printManualDeleteInstructions(keyID)
				os.Exit(1)
			}

			// –£–¥–∞–ª—è–µ–º –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–µ—Å–ª–∏ –æ–Ω —Ç–∞–º –±—ã–ª)
			if cfg.GPGKey != "" {
				cfg.GPGKey = ""
				if err := config.SaveConfig(cfg); err != nil {
					fmt.Printf("‚ö†Ô∏è –ö–ª—é—á —É–¥–∞–ª–µ–Ω –∏–∑ GPG, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥: %v\n", err)
					os.Exit(1)
				}
			}

			fmt.Printf("\n‚úÖ –ö–ª—é—á %s —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ GPG\n", keyID)
			fmt.Println("–§–∞–π–ª—ã —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ .secrets/")
		},
	}

	cmd.Flags().BoolVarP(&force, "force", "f", false, "–£–¥–∞–ª–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
	cmd.Flags().BoolVar(&noBackup, "no-backup", false, "–ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∫–ª—é—á–µ–π")
	return cmd
}

type keyInfo struct {
	name  string
	email string
}

// autoDetectKey –ø—ã—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞
func autoDetectKey() (string, error) {
	cmd := exec.Command("gpg", "--list-secret-keys", "--keyid-format", "LONG")
	output, err := cmd.CombinedOutput()
	if err != nil {
		return "", fmt.Errorf("gpg error: %v", err)
	}

	lines := strings.Split(string(output), "\n")
	for _, line := range lines {
		if strings.Contains(line, "sec") && strings.Contains(line, "4096") {
			parts := strings.Fields(line)
			if len(parts) >= 4 {
				keyPart := parts[3]
				if strings.Contains(keyPart, "/") {
					keyParts := strings.Split(keyPart, "/")
					if len(keyParts) == 2 {
						return keyParts[1], nil
					}
				}
			}
		}
	}

	return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á")
}

// keyExistsInGPG –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á –≤ GPG
func keyExistsInGPG(keyID string) bool {
	cmd := exec.Command("gpg", "--list-keys", keyID)
	err := cmd.Run()
	return err == nil
}

func getKeyInfo(keyID string) (*keyInfo, error) {
	cmd := exec.Command("gpg", "--list-keys", "--with-colons", keyID)
	output, err := cmd.CombinedOutput()
	if err != nil {
		return nil, fmt.Errorf("gpg error: %v", err)
	}

	lines := strings.Split(string(output), "\n")
	for _, line := range lines {
		if strings.HasPrefix(line, "uid:") {
			parts := strings.Split(line, ":")
			if len(parts) > 9 {
				return &keyInfo{
					name:  parts[9],
					email: extractEmail(parts[9]),
				}, nil
			}
		}
	}

	return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ")
}

func extractEmail(uid string) string {
	start := strings.Index(uid, "<")
	end := strings.Index(uid, ">")
	if start >= 0 && end > start {
		return uid[start+1 : end]
	}
	return ""
}

func createBackup(keyID string) error {
	backupDir := filepath.Join(".secrets", "backup")
	if err := os.MkdirAll(backupDir, 0700); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: %v", err)
	}

	// –≠–∫—Å–ø–æ—Ä—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
	pubKeyPath := filepath.Join(backupDir, fmt.Sprintf("key_%s.pub.asc", keyID))
	cmdPub := exec.Command("gpg", "--armor", "--export", keyID, "--output", pubKeyPath)
	if output, err := cmdPub.CombinedOutput(); err != nil {
		return fmt.Errorf("—ç–∫—Å–ø–æ—Ä—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: %s: %v", string(output), err)
	}

	// –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (—Å –≤–≤–æ–¥–æ–º –ø–∞—Ä–æ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
	privKeyPath := filepath.Join(backupDir, fmt.Sprintf("key_%s.priv.asc", keyID))
	cmdPriv := exec.Command("gpg", "--armor", "--export-secret-keys", keyID, "--output", privKeyPath)

	// –ï—Å–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
	if term.IsTerminal(int(os.Stdin.Fd())) {
		cmdPriv.Stdin = os.Stdin
		cmdPriv.Stdout = os.Stdout
		cmdPriv.Stderr = os.Stderr
	}

	if output, err := cmdPriv.CombinedOutput(); err != nil {
		return fmt.Errorf("—ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: %s: %v", string(output), err)
	}

	fmt.Printf("‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ %s\n", backupDir)
	return nil
}

func deleteKey(keyID string) error {
	// –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
	cmdDelSecret := exec.Command("gpg", "--batch", "--yes", "--delete-secret-keys", keyID)
	cmdDelSecret.Stdin = os.Stdin
	cmdDelSecret.Stdout = os.Stdout
	cmdDelSecret.Stderr = os.Stderr

	if err := cmdDelSecret.Run(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: %v", err)
	}

	// –£–¥–∞–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
	cmdDelPub := exec.Command("gpg", "--batch", "--yes", "--delete-keys", keyID)
	cmdDelPub.Stdin = os.Stdin
	cmdDelPub.Stdout = os.Stdout
	cmdDelPub.Stderr = os.Stderr

	if err := cmdDelPub.Run(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: %v", err)
	}

	return nil
}

func printManualDeleteInstructions(keyID string) {
	fmt.Println("\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é:")
	fmt.Println()
	fmt.Printf("1. –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:\n   gpg --delete-secret-keys %s\n", keyID)
	fmt.Printf("2. –£–¥–∞–ª–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:\n   gpg --delete-keys %s\n", keyID)
	fmt.Println()
	fmt.Println("–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å sudo:")
	fmt.Printf("   sudo gpg --delete-secret-keys %s\n", keyID)
	fmt.Printf("   sudo gpg --delete-keys %s\n", keyID)
	fmt.Println()
	fmt.Println("–ï—Å–ª–∏ –∫–ª—é—á –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ")
}

// package commands

// import (
// 	"bufio"
// 	"fmt"
// 	"os"
// 	"os/exec"
// 	"path/filepath"
// 	"strings"

// 	"github.com/Avdushin/secret/pkg/config"
// 	"github.com/spf13/cobra"
// 	"golang.org/x/term"
// )

// // @ delete cmd
// func DeleteKeyCmd() *cobra.Command {
// 	var force bool
// 	var noBackup bool

// 	cmd := &cobra.Command{
// 		Use:   "delete-key",
// 		Short: "–£–¥–∞–ª—è–µ—Ç GPG-–∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞",
// 		Run: func(cmd *cobra.Command, args []string) {
// 			cfg, err := config.LoadConfig()

// 			// –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–ª–∏ –∫–ª—é—á –≤ –∫–æ–Ω—Ñ–∏–≥–µ –ø—É—Å—Ç–æ–π,
// 			// –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–ª—é—á –≤ GPG
// 			var keyID string
// 			if err != nil || cfg.GPGKey == "" {
// 				fmt.Println("‚ÑπÔ∏è  –í –∫–æ–Ω—Ñ–∏–≥–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω GPG-–∫–ª—é—á")
// 				fmt.Println("üîç –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–ª—é—á –≤ GPG...")

// 				// –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞
// 				autoKey, autoErr := autoDetectKey()
// 				if autoErr != nil {
// 					fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ GPG-–∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞")
// 					fmt.Println("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: secret init")
// 					os.Exit(1)
// 				}

// 				keyID = autoKey
// 				fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª—é—á –≤ GPG: %s\n", keyID)
// 			} else {
// 				keyID = cfg.GPGKey
// 			}

// 			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á –≤ GPG
// 			if !keyExistsInGPG(keyID) {
// 				fmt.Printf("‚ùå –ö–ª—é—á %s –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ GPG\n", keyID)
// 				if cfg.GPGKey != "" {
// 					fmt.Println("–û—á–∏—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
// 					cfg.GPGKey = ""
// 					config.SaveConfig(cfg) // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
// 				}
// 				fmt.Println("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: secret init")
// 				os.Exit(1)
// 			}

// 			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ
// 			keyInfo, err := getKeyInfo(keyID)
// 			if err != nil {
// 				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ: %v\n", err)
// 				os.Exit(1)
// 			}

// 			if !force {
// 				fmt.Printf("\n–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞:\n")
// 				fmt.Printf("ID: %s\n", keyID)
// 				fmt.Printf("–ò–º—è: %s\n", keyInfo.name)
// 				fmt.Printf("Email: %s\n", keyInfo.email)
// 				fmt.Print("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")

// 				reader := bufio.NewReader(os.Stdin)
// 				confirm, _ := reader.ReadString('\n')
// 				if strings.ToLower(strings.TrimSpace(confirm)) != "y" {
// 					fmt.Println("–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è")
// 					return
// 				}
// 			}

// 			// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é (–µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
// 			if !noBackup {
// 				fmt.Println("\n–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∫–ª—é—á–µ–π...")
// 				if err := createBackup(keyID); err != nil {
// 					fmt.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: %v\n", err)
// 					fmt.Println("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
// 				}
// 			}

// 			// –£–¥–∞–ª—è–µ–º –∫–ª—é—á –∏–∑ GPG
// 			fmt.Println("\n–£–¥–∞–ª—è–µ–º –∫–ª—é—á –∏–∑ GPG...")
// 			if err := deleteKey(keyID); err != nil {
// 				fmt.Printf("\n‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞: %v\n", err)
// 				printManualDeleteInstructions(keyID)
// 				os.Exit(1)
// 			}

// 			// –£–¥–∞–ª—è–µ–º –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–µ—Å–ª–∏ –æ–Ω —Ç–∞–º –±—ã–ª)
// 			if cfg.GPGKey != "" {
// 				cfg.GPGKey = ""
// 				if err := config.SaveConfig(cfg); err != nil {
// 					fmt.Printf("‚ö†Ô∏è –ö–ª—é—á —É–¥–∞–ª–µ–Ω –∏–∑ GPG, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥: %v\n", err)
// 					os.Exit(1)
// 				}
// 			}

// 			//! // –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏
// 			// secretsDir := filepath.Join(".secrets")
// 			// if _, err := os.Stat(secretsDir); err == nil {
// 			// 	fmt.Println("üóëÔ∏è  –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏...")
// 			// 	os.RemoveAll(secretsDir)
// 			// }

// 			fmt.Printf("\n‚úÖ –ö–ª—é—á %s —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω\n", keyID)
// 			fmt.Println("–ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω –æ—Ç GPG-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
// 		},
// 	}

// 	cmd.Flags().BoolVarP(&force, "force", "f", false, "–£–¥–∞–ª–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
// 	cmd.Flags().BoolVar(&noBackup, "no-backup", false, "–ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∫–ª—é—á–µ–π")
// 	return cmd
// }

// type keyInfo struct {
// 	name  string
// 	email string
// }

// // autoDetectKey –ø—ã—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞
// func autoDetectKey() (string, error) {
// 	cmd := exec.Command("gpg", "--list-secret-keys", "--keyid-format", "LONG")
// 	output, err := cmd.CombinedOutput()
// 	if err != nil {
// 		return "", fmt.Errorf("gpg error: %v", err)
// 	}

// 	lines := strings.Split(string(output), "\n")
// 	for _, line := range lines {
// 		if strings.Contains(line, "sec") && strings.Contains(line, "4096") {
// 			parts := strings.Fields(line)
// 			if len(parts) >= 4 {
// 				keyPart := parts[3]
// 				if strings.Contains(keyPart, "/") {
// 					keyParts := strings.Split(keyPart, "/")
// 					if len(keyParts) == 2 {
// 						return keyParts[1], nil
// 					}
// 				}
// 			}
// 		}
// 	}

// 	return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á")
// }

// // keyExistsInGPG –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á –≤ GPG
// func keyExistsInGPG(keyID string) bool {
// 	cmd := exec.Command("gpg", "--list-keys", keyID)
// 	err := cmd.Run()
// 	return err == nil
// }

// func getKeyInfo(keyID string) (*keyInfo, error) {
// 	cmd := exec.Command("gpg", "--list-keys", "--with-colons", keyID)
// 	output, err := cmd.CombinedOutput()
// 	if err != nil {
// 		return nil, fmt.Errorf("gpg error: %v", err)
// 	}

// 	lines := strings.Split(string(output), "\n")
// 	for _, line := range lines {
// 		if strings.HasPrefix(line, "uid:") {
// 			parts := strings.Split(line, ":")
// 			if len(parts) > 9 {
// 				return &keyInfo{
// 					name:  parts[9],
// 					email: extractEmail(parts[9]),
// 				}, nil
// 			}
// 		}
// 	}

// 	return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ")
// }

// func extractEmail(uid string) string {
// 	start := strings.Index(uid, "<")
// 	end := strings.Index(uid, ">")
// 	if start >= 0 && end > start {
// 		return uid[start+1 : end]
// 	}
// 	return ""
// }

// func createBackup(keyID string) error {
// 	backupDir := filepath.Join(".secrets", "backup")
// 	if err := os.MkdirAll(backupDir, 0700); err != nil {
// 		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: %v", err)
// 	}

// 	// –≠–∫—Å–ø–æ—Ä—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
// 	pubKeyPath := filepath.Join(backupDir, fmt.Sprintf("key_%s.pub.asc", keyID))
// 	cmdPub := exec.Command("gpg", "--armor", "--export", keyID, "--output", pubKeyPath)
// 	if output, err := cmdPub.CombinedOutput(); err != nil {
// 		return fmt.Errorf("—ç–∫—Å–ø–æ—Ä—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: %s: %v", string(output), err)
// 	}

// 	// –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (—Å –≤–≤–æ–¥–æ–º –ø–∞—Ä–æ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
// 	privKeyPath := filepath.Join(backupDir, fmt.Sprintf("key_%s.priv.asc", keyID))
// 	cmdPriv := exec.Command("gpg", "--armor", "--export-secret-keys", keyID, "--output", privKeyPath)

// 	// –ï—Å–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
// 	if term.IsTerminal(int(os.Stdin.Fd())) {
// 		cmdPriv.Stdin = os.Stdin
// 		cmdPriv.Stdout = os.Stdout
// 		cmdPriv.Stderr = os.Stderr
// 	}

// 	if output, err := cmdPriv.CombinedOutput(); err != nil {
// 		return fmt.Errorf("—ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: %s: %v", string(output), err)
// 	}

// 	fmt.Printf("‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ %s\n", backupDir)
// 	return nil
// }

// func deleteKey(keyID string) error {
// 	// –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
// 	cmdDelSecret := exec.Command("gpg", "--batch", "--yes", "--delete-secret-keys", keyID)
// 	cmdDelSecret.Stdin = os.Stdin
// 	cmdDelSecret.Stdout = os.Stdout
// 	cmdDelSecret.Stderr = os.Stderr

// 	if err := cmdDelSecret.Run(); err != nil {
// 		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: %v", err)
// 	}

// 	// –£–¥–∞–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
// 	cmdDelPub := exec.Command("gpg", "--batch", "--yes", "--delete-keys", keyID)
// 	cmdDelPub.Stdin = os.Stdin
// 	cmdDelPub.Stdout = os.Stdout
// 	cmdDelPub.Stderr = os.Stderr

// 	if err := cmdDelPub.Run(); err != nil {
// 		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: %v", err)
// 	}

// 	return nil
// }

// func printManualDeleteInstructions(keyID string) {
// 	fmt.Println("\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é:")
// 	fmt.Println()
// 	fmt.Printf("1. –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:\n   gpg --delete-secret-keys %s\n", keyID)
// 	fmt.Printf("2. –£–¥–∞–ª–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:\n   gpg --delete-keys %s\n", keyID)
// 	fmt.Println()
// 	fmt.Println("–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å sudo:")
// 	fmt.Printf("   sudo gpg --delete-secret-keys %s\n", keyID)
// 	fmt.Printf("   sudo gpg --delete-keys %s\n", keyID)
// 	fmt.Println()
// 	fmt.Println("–ï—Å–ª–∏ –∫–ª—é—á –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ")
// }
