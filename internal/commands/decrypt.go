package commands

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/Avdushin/secret/internal/backends"
	"github.com/Avdushin/secret/pkg/config"
	"github.com/spf13/cobra"
)

// @ decrypt cmd
func DecryptCmd() *cobra.Command {
	var allFiles bool

	cmd := &cobra.Command{
		Use:   "decrypt [file]",
		Short: "–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã",
		Args:  cobra.MaximumNArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			cfg, err := config.LoadConfig()
			if err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: %v\n", err)
				os.Exit(1)
			}

			gpg := backends.NewGPGBackend(cfg)

			// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
			if len(args) == 1 {
				if err := gpg.Decrypt(args[0]); err != nil {
					fmt.Printf("‚ùå –û—à–∏–±–∫–∞: %v\n", err)
					os.Exit(1)
				}
				return
			}

			// –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
			filesToDecrypt := getEncryptedFiles(cfg.SecretFiles)
			if len(filesToDecrypt) == 0 {
				fmt.Println("‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏")
				return
			}

			fmt.Printf("üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º %d —Ñ–∞–π–ª–æ–≤...\n", len(filesToDecrypt))
			for _, file := range filesToDecrypt {
				if err := gpg.Decrypt(file); err != nil {
					fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ %s: %v\n", file, err)
				}
			}

			fmt.Println("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
		},
	}

	cmd.Flags().BoolVarP(&allFiles, "all", "a", false, "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞")
	return cmd
}

func getEncryptedFiles(patterns []string) []string {
	var result []string
	for _, pattern := range patterns {
		matches, _ := filepath.Glob(pattern + ".gpg")
		result = append(result, matches...)
	}
	return result
}
