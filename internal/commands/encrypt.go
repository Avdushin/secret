package commands

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/Avdushin/secret/internal/backends"
	"github.com/Avdushin/secret/pkg/config"
	"github.com/spf13/cobra"
)

// @ encrypt cmd
func EncryptCmd() *cobra.Command {
	var keyID string
	var allFiles bool

	cmd := &cobra.Command{
		Use:   "encrypt [file]",
		Short: "–®–∏—Ñ—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã",
		Args:  cobra.MaximumNArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			cfg, err := config.LoadConfig()
			if err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: %v\n", err)
				os.Exit(1)
			}

			// –ï—Å–ª–∏ –∫–ª—é—á —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ, –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º
			if keyID != "" {
				cfg.GPGKey = keyID
			}

			gpg := backends.NewGPGBackend(cfg)

			// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
			if len(args) == 1 {
				if err := gpg.Encrypt(args[0]); err != nil {
					fmt.Printf("‚ùå –û—à–∏–±–∫–∞: %v\n", err)
					os.Exit(1)
				}
				return
			}

			// –®–∏—Ñ—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
			filesToEncrypt := getFilesToProcess(cfg.SecretFiles)
			if len(filesToEncrypt) == 0 {
				fmt.Println("‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
				return
			}

			fmt.Printf("üîí –®–∏—Ñ—Ä—É–µ–º %d —Ñ–∞–π–ª–æ–≤...\n", len(filesToEncrypt))
			for _, file := range filesToEncrypt {
				if err := gpg.Encrypt(file); err != nil {
					fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ %s: %v\n", file, err)
				}
			}
			fmt.Println("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
		},
	}

	cmd.Flags().StringVarP(&keyID, "key", "k", "", "GPG Key ID –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
	cmd.Flags().BoolVarP(&allFiles, "all", "a", false, "–®–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞")
	return cmd
}

func getFilesToProcess(patterns []string) []string {
	var result []string
	for _, pattern := range patterns {
		matches, _ := filepath.Glob(pattern)
		result = append(result, matches...)
	}
	return result
}
